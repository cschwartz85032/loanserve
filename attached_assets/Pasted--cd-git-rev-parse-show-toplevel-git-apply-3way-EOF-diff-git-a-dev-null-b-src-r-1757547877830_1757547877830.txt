 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a//dev/null b/src/routes/imports.routes.ts
index 0000000000000000000000000000000000000000..a09962c21f8514fb9f93bd3ddb2711abf5d0c3c0 100644
--- a//dev/null
+++ b/src/routes/imports.routes.ts
@@ -0,0 +1,64 @@
+import { Router } from 'express';
+import multer from 'multer';
+import crypto from 'crypto';
+import { AIPipelineService } from '../database/ai-pipeline-service';
+
+export const importsRouter = Router();
+const upload = multer({ storage: multer.memoryStorage() });
+
+// Create import job
+importsRouter.post('/imports', upload.single('file'), async (req: any, res) => {
+  try {
+    if (!req.file) {
+      return res.status(400).json({ error: 'File required' });
+    }
+
+    const tenantId = req.user?.tenantId || '00000000-0000-0000-0000-000000000001';
+    const importType = req.body.importType || 'csv';
+    const hash = crypto.createHash('sha256').update(req.file.buffer).digest('hex');
+    const service = new AIPipelineService();
+
+    const record = await service.createImport({
+      tenantId,
+      type: importType,
+      filename: req.file.originalname,
+      sizeBytes: req.file.size,
+      sha256: hash,
+      createdBy: req.user?.id || tenantId
+    });
+
+    res.status(202).json({ importId: record.id, status: record.status });
+  } catch (error) {
+    console.error('Create import error:', error);
+    res.status(500).json({
+      error: 'Failed to create import job',
+      message: error instanceof Error ? error.message : String(error)
+    });
+  }
+});
+
+// Fetch import status
+importsRouter.get('/imports/:id', async (req: any, res) => {
+  try {
+    const tenantId = req.user?.tenantId || '00000000-0000-0000-0000-000000000001';
+    const service = new AIPipelineService();
+    const record = await service.getImport(req.params.id, tenantId);
+
+    if (!record) {
+      return res.status(404).json({ error: 'Import not found' });
+    }
+
+    res.json({
+      importId: record.id,
+      status: record.status,
+      preview: (record as any).progress?.preview,
+      errors: (record as any).progress?.errors || []
+    });
+  } catch (error) {
+    console.error('Get import error:', error);
+    res.status(500).json({
+      error: 'Failed to fetch import',
+      message: error instanceof Error ? error.message : String(error)
+    });
+  }
+});
 
EOF
)