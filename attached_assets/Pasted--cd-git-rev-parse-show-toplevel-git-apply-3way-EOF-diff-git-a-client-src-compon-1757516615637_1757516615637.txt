 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/client/src/components/loans/simple-new-loan-dialog.tsx b/client/src/components/loans/simple-new-loan-dialog.tsx
index 20bade29a1ff1f46d8cbb204285d3ff49d2708af..1b9326ce59a35f070977e1e7081603521acc960f 100644
--- a/client/src/components/loans/simple-new-loan-dialog.tsx
+++ b/client/src/components/loans/simple-new-loan-dialog.tsx
@@ -1,213 +1,188 @@
 import { useState } from "react";
 import { useMutation, useQueryClient } from "@tanstack/react-query";
 import { useAuth } from "@/hooks/use-auth";
 import { apiRequest } from "@/lib/queryClient";
 import { useToast } from "@/hooks/use-toast";
 import {
   Dialog,
   DialogContent,
   DialogDescription,
   DialogHeader,
   DialogTitle,
 } from "@/components/ui/dialog";
 import { Button } from "@/components/ui/button";
 import { Input } from "@/components/ui/input";
 import { Label } from "@/components/ui/label";
+import { generateServicingAccountNumber } from "@shared/utils";
 
 interface SimpleNewLoanDialogProps {
   open: boolean;
   onOpenChange: (open: boolean) => void;
 }
 
 export function SimpleNewLoanDialog({ open, onOpenChange }: SimpleNewLoanDialogProps) {
   const { user } = useAuth();
   const { toast } = useToast();
   const queryClient = useQueryClient();
 
   const [formData, setFormData] = useState({
-    loanNumber: "",
     originalAmount: "",
     interestRate: "",
     termMonths: "",
     propertyAddress: "",
     propertyCity: "",
     propertyState: "",
     propertyZip: ""
   });
 
   const createLoanMutation = useMutation({
     mutationFn: async (data: any) => {
       // First create the property
       const propertyData = {
         propertyType: "single_family",
         address: data.propertyAddress,
         city: data.propertyCity,
         state: data.propertyState,
         zipCode: data.propertyZip
       };
       
       const propertyResponse = await apiRequest("POST", "/api/properties", propertyData);
       const property = await propertyResponse.json();
       
       // Then create the loan with the property ID
       // Convert numbers to strings for decimal fields as required by database
       const loanData = {
-        loanNumber: data.loanNumber,
+        loanNumber: generateServicingAccountNumber(),
         loanType: "conventional",
         propertyId: property.id,
         originalAmount: data.originalAmount.toString(),
         principalBalance: data.principalBalance.toString(),
         interestRate: data.interestRate.toString(),
         rateType: "fixed",
         loanTerm: data.loanTerm,
         paymentAmount: data.paymentAmount.toString(),
         status: "active",
         maturityDate: new Date(new Date().setMonth(new Date().getMonth() + parseInt(data.termMonths))).toISOString().split('T')[0],
         firstPaymentDate: data.firstPaymentDate,
         nextPaymentDate: data.nextPaymentDate,
         lenderId: data.lenderId,
         servicerId: data.servicerId
       };
       
       const response = await apiRequest("POST", "/api/loans", loanData);
       return response.json();
     },
     onSuccess: () => {
       toast({
         title: "Success",
         description: "Loan created successfully",
       });
       queryClient.invalidateQueries({ queryKey: ["/api/loans"] });
       queryClient.invalidateQueries({ queryKey: ["/api/loans/metrics"] });
       resetForm();
       onOpenChange(false);
     },
     onError: (error: Error) => {
       toast({
         title: "Error",
         description: error.message || "Failed to create loan",
         variant: "destructive",
       });
     },
   });
 
   const resetForm = () => {
     setFormData({
-      loanNumber: "",
       originalAmount: "",
       interestRate: "",
       termMonths: "",
       propertyAddress: "",
       propertyCity: "",
       propertyState: "",
       propertyZip: ""
     });
   };
 
   const handleSubmit = (e: React.FormEvent) => {
     e.preventDefault();
     
     // Calculate monthly payment
     const principal = parseFloat(formData.originalAmount) || 0;
     const rate = (parseFloat(formData.interestRate) || 0) / 100 / 12;
     const months = parseInt(formData.termMonths) || 0;
     
     let monthlyPayment = 0;
     if (principal > 0 && rate > 0 && months > 0) {
       monthlyPayment = (principal * rate * Math.pow(1 + rate, months)) / (Math.pow(1 + rate, months) - 1);
     }
     
     const submitData = {
-      loanNumber: formData.loanNumber,
       originalAmount: formData.originalAmount,
       principalBalance: formData.originalAmount,
       interestRate: formData.interestRate,
       loanTerm: parseInt(formData.termMonths),
       termMonths: formData.termMonths,
       paymentAmount: monthlyPayment.toFixed(2),
       propertyAddress: formData.propertyAddress,
       propertyCity: formData.propertyCity,
       propertyState: formData.propertyState,
       propertyZip: formData.propertyZip,
       loanType: "conventional",
       firstPaymentDate: new Date(new Date().setMonth(new Date().getMonth() + 1)).toISOString().split('T')[0],
       nextPaymentDate: new Date(new Date().setMonth(new Date().getMonth() + 1)).toISOString().split('T')[0],
       lenderId: user?.id,
       servicerId: user?.id
     };
     
     createLoanMutation.mutate(submitData);
   };
 
-  const generateLoanNumber = () => {
-    const prefix = "LN";
-    const timestamp = Date.now().toString().slice(-6);
-    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
-    setFormData(prev => ({ ...prev, loanNumber: `${prefix}${timestamp}${random}` }));
-  };
-
   return (
     <Dialog open={open} onOpenChange={onOpenChange}>
       <DialogContent className="max-w-md">
         <DialogHeader>
           <DialogTitle>Create New Loan</DialogTitle>
           <DialogDescription>
             Enter basic loan information below.
           </DialogDescription>
         </DialogHeader>
         
         <form onSubmit={handleSubmit} className="space-y-4">
-          <div className="space-y-2">
-            <Label htmlFor="loanNumber">Loan Number</Label>
-            <div className="flex space-x-2">
-              <Input
-                id="loanNumber"
-                value={formData.loanNumber}
-                onChange={(e) => setFormData(prev => ({ ...prev, loanNumber: e.target.value }))}
-                placeholder="Enter or generate"
-                required
-              />
-              <Button type="button" variant="outline" onClick={generateLoanNumber}>
-                Generate
-              </Button>
-            </div>
-          </div>
-          
           <div className="space-y-2">
             <Label htmlFor="originalAmount">Loan Amount</Label>
             <Input
               id="originalAmount"
               type="number"
               step="0.01"
               value={formData.originalAmount}
               onChange={(e) => setFormData(prev => ({ ...prev, originalAmount: e.target.value }))}
               placeholder="0.00"
               required
             />
           </div>
-          
+
           <div className="space-y-2">
             <Label htmlFor="interestRate">Interest Rate (%)</Label>
             <Input
               id="interestRate"
               type="number"
               step="0.01"
               value={formData.interestRate}
               onChange={(e) => setFormData(prev => ({ ...prev, interestRate: e.target.value }))}
               placeholder="0.00"
               required
             />
           </div>
           
           <div className="space-y-2">
             <Label htmlFor="termMonths">Term (Months)</Label>
             <Input
               id="termMonths"
               type="number"
               value={formData.termMonths}
               onChange={(e) => setFormData(prev => ({ ...prev, termMonths: e.target.value }))}
               placeholder="360"
               required
             />
           </div>
           
 
EOF
)